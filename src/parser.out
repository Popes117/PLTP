Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARGDELIMITER
    ARGUMENT
    COLON
    COMMENT
    CR
    ELSE
    FUNCTION_DEFINITION
    IF
    KEY
    LPAREN
    NAME
    RPAREN
    SEMICOLON
    SPACE
    SPACES
    THEN

Grammar

Rule 0     S' -> Exp
Rule 1     Exp -> Exp STRING
Rule 2     Exp -> Exp NUMBER
Rule 3     Exp -> Exp DOT
Rule 4     Exp -> Exp EMIT
Rule 5     Exp -> Exp CHAR
Rule 6     Exp -> Exp PRINTSTRING
Rule 7     Exp -> Exp MATH_OPERATOR
Rule 8     Exp -> <empty>

Terminals, with rules where they appear

ARGDELIMITER         : 
ARGUMENT             : 
CHAR                 : 5
COLON                : 
COMMENT              : 
CR                   : 
DOT                  : 3
ELSE                 : 
EMIT                 : 4
FUNCTION_DEFINITION  : 
IF                   : 
KEY                  : 
LPAREN               : 
MATH_OPERATOR        : 7
NAME                 : 
NUMBER               : 2
PRINTSTRING          : 6
RPAREN               : 
SEMICOLON            : 
SPACE                : 
SPACES               : 
STRING               : 1
THEN                 : 
error                : 

Nonterminals, with rules where they appear

Exp                  : 1 2 3 4 5 6 7 0

Parsing method: LALR

state 0

    (0) S' -> . Exp
    (1) Exp -> . Exp STRING
    (2) Exp -> . Exp NUMBER
    (3) Exp -> . Exp DOT
    (4) Exp -> . Exp EMIT
    (5) Exp -> . Exp CHAR
    (6) Exp -> . Exp PRINTSTRING
    (7) Exp -> . Exp MATH_OPERATOR
    (8) Exp -> .

    STRING          reduce using rule 8 (Exp -> .)
    NUMBER          reduce using rule 8 (Exp -> .)
    DOT             reduce using rule 8 (Exp -> .)
    EMIT            reduce using rule 8 (Exp -> .)
    CHAR            reduce using rule 8 (Exp -> .)
    PRINTSTRING     reduce using rule 8 (Exp -> .)
    MATH_OPERATOR   reduce using rule 8 (Exp -> .)
    $end            reduce using rule 8 (Exp -> .)

    Exp                            shift and go to state 1

state 1

    (0) S' -> Exp .
    (1) Exp -> Exp . STRING
    (2) Exp -> Exp . NUMBER
    (3) Exp -> Exp . DOT
    (4) Exp -> Exp . EMIT
    (5) Exp -> Exp . CHAR
    (6) Exp -> Exp . PRINTSTRING
    (7) Exp -> Exp . MATH_OPERATOR

    STRING          shift and go to state 2
    NUMBER          shift and go to state 3
    DOT             shift and go to state 4
    EMIT            shift and go to state 5
    CHAR            shift and go to state 6
    PRINTSTRING     shift and go to state 7
    MATH_OPERATOR   shift and go to state 8


state 2

    (1) Exp -> Exp STRING .

    STRING          reduce using rule 1 (Exp -> Exp STRING .)
    NUMBER          reduce using rule 1 (Exp -> Exp STRING .)
    DOT             reduce using rule 1 (Exp -> Exp STRING .)
    EMIT            reduce using rule 1 (Exp -> Exp STRING .)
    CHAR            reduce using rule 1 (Exp -> Exp STRING .)
    PRINTSTRING     reduce using rule 1 (Exp -> Exp STRING .)
    MATH_OPERATOR   reduce using rule 1 (Exp -> Exp STRING .)
    $end            reduce using rule 1 (Exp -> Exp STRING .)


state 3

    (2) Exp -> Exp NUMBER .

    STRING          reduce using rule 2 (Exp -> Exp NUMBER .)
    NUMBER          reduce using rule 2 (Exp -> Exp NUMBER .)
    DOT             reduce using rule 2 (Exp -> Exp NUMBER .)
    EMIT            reduce using rule 2 (Exp -> Exp NUMBER .)
    CHAR            reduce using rule 2 (Exp -> Exp NUMBER .)
    PRINTSTRING     reduce using rule 2 (Exp -> Exp NUMBER .)
    MATH_OPERATOR   reduce using rule 2 (Exp -> Exp NUMBER .)
    $end            reduce using rule 2 (Exp -> Exp NUMBER .)


state 4

    (3) Exp -> Exp DOT .

    STRING          reduce using rule 3 (Exp -> Exp DOT .)
    NUMBER          reduce using rule 3 (Exp -> Exp DOT .)
    DOT             reduce using rule 3 (Exp -> Exp DOT .)
    EMIT            reduce using rule 3 (Exp -> Exp DOT .)
    CHAR            reduce using rule 3 (Exp -> Exp DOT .)
    PRINTSTRING     reduce using rule 3 (Exp -> Exp DOT .)
    MATH_OPERATOR   reduce using rule 3 (Exp -> Exp DOT .)
    $end            reduce using rule 3 (Exp -> Exp DOT .)


state 5

    (4) Exp -> Exp EMIT .

    STRING          reduce using rule 4 (Exp -> Exp EMIT .)
    NUMBER          reduce using rule 4 (Exp -> Exp EMIT .)
    DOT             reduce using rule 4 (Exp -> Exp EMIT .)
    EMIT            reduce using rule 4 (Exp -> Exp EMIT .)
    CHAR            reduce using rule 4 (Exp -> Exp EMIT .)
    PRINTSTRING     reduce using rule 4 (Exp -> Exp EMIT .)
    MATH_OPERATOR   reduce using rule 4 (Exp -> Exp EMIT .)
    $end            reduce using rule 4 (Exp -> Exp EMIT .)


state 6

    (5) Exp -> Exp CHAR .

    STRING          reduce using rule 5 (Exp -> Exp CHAR .)
    NUMBER          reduce using rule 5 (Exp -> Exp CHAR .)
    DOT             reduce using rule 5 (Exp -> Exp CHAR .)
    EMIT            reduce using rule 5 (Exp -> Exp CHAR .)
    CHAR            reduce using rule 5 (Exp -> Exp CHAR .)
    PRINTSTRING     reduce using rule 5 (Exp -> Exp CHAR .)
    MATH_OPERATOR   reduce using rule 5 (Exp -> Exp CHAR .)
    $end            reduce using rule 5 (Exp -> Exp CHAR .)


state 7

    (6) Exp -> Exp PRINTSTRING .

    STRING          reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    NUMBER          reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    DOT             reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    EMIT            reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    CHAR            reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    PRINTSTRING     reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    MATH_OPERATOR   reduce using rule 6 (Exp -> Exp PRINTSTRING .)
    $end            reduce using rule 6 (Exp -> Exp PRINTSTRING .)


state 8

    (7) Exp -> Exp MATH_OPERATOR .

    STRING          reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    NUMBER          reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    DOT             reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    EMIT            reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    CHAR            reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    PRINTSTRING     reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    MATH_OPERATOR   reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)
    $end            reduce using rule 7 (Exp -> Exp MATH_OPERATOR .)

